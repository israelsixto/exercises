salaries[100,]
salaries[change[9919.052],]
salaries[salaries$change[9919.052],]
salaries[salaries$change[9919.052]]
salaries[salaries$change == 9919.052,]
salaries[salaries$change == 9919.052]
salaries[,salaries$change == 9919.052]
salaries$employees[salaries$change == 9919.052])
salaries$employees[salaries$change == 9919.052]
salaries$employees[salaries$change == 9919.052]
salaries$change[salaries$change == 9919.052]
salaries[salaries$change == 9919.052]
min(salaries$change)
salaries[employees, 9919.052]
salaries[salaries$employees, 9919.052]
salaries[salaries$employees, val.9919.052]
mean(salaries$change)
salaries[salaries$employees, 9919.052]
salaries[salaries$change == 9919.052]
max(salaries$change)
salaries[9919.052]
salaries[[9919.052]]
salaries[9919.052, ]
salaries[, 9919.052]
salaries[salaries$employees]
salaries[, salaries$employees]
salaries[salaries$employees,]
rm(list=ls())
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
salaries_2018 <- c(runif(100, -5000, 10000) + salaries_2017)
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
salaries$change <-c(salaries_2018 - salaries_2017)
salaries$got_raise <- c(salaries$change > 0)
salaries[57, "salaries_2018"]
length(salaries$got_raise[salaries$got_raise == TRUE])
# https://stackoverflow.com/questions/2190756/how-to-count-true-values-in-a-logical-vector
sum(salaries$got_raise, na.rm=TRUE)
max(salaries$change)
add_pizza <- function(meal){
meal <-c(meal, "pizza")
return(meal)
}
my_breakfast <- c("bagel", "blueberry banana oatmeal", "orange", "water")
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bagel", "blueberry banana oatmeal", "orange", "water")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("chicken burrito", "water", "Fuji Apple")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals`` list that has what you plan to eat
# for dinner
meals$dinner <- "molly moons"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_of_foods <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal){
meal <-c(meal, "pizza")
return(meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- c(add_pizza(meals))
better_meals
all.equal.formula()
1+1
rm(list=ls())
# Exercise 2: working with data frames
rm(list=ls())
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- c(runif(100, -5000, 10000) + salaries_2017)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <-c(salaries_2018 - salaries_2017)
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- c(salaries$change > 0)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
salaries[57, "salaries_2018"]
# How many employees got a raise?
length(salaries$got_raise[salaries$got_raise == TRUE])
# https://stackoverflow.com/questions/2190756/how-to-count-true-values-in-a-logical-vector
sum(salaries$got_raise, na.rm=TRUE)
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$employees,]
# What was the largest decrease in salaries between the two years?
min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$employees, 9919.052]
# What was the average salary change?
mean(salaries$change)
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
length(salaries$got_raise[salaries$got_raise == TRUE])
max(salaries$change)
salaries[salaries$employees]
salaries$employees[max(salaries$change)]
mean(salaries$got_raise[salaries$got_raise == FALSE])
length(salaries$got_raise[salaries$got_raise == FALSE])
length(salaries$got_raise[salaries$got_raise == TRUE])
mean(salaries$change)
mean(salaries$change < 0)
mean(salaries$change < 0)
mean(salaries$change)
mean(salaries[salaries$change < 0])
mean(salaries[salaries$change < 0, ])
# For people who did not get a raise, how much money did they lose on average?
salaries$change < 0
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$change < 0]
# For people who did not get a raise, how much money did they lose on average?
salaries$change[salaries$change < 0]
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change[salaries$change < 0])
setwd("~/Desktop/project-name")
getwd()
setwd("~/Desktop/project-name")
setwd("~/Desktop")
rm(list=ls())
# Exercise 2: working with data frames
rm(list=ls())
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- c(runif(100, -5000, 10000) + salaries_2017)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- (salaries_2018 - salaries_2017)
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- (salaries$change > 0)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
salaries[57, "salaries_2018"]
# How many employees got a raise?
length(salaries$got_raise[salaries$got_raise == TRUE])
# https://stackoverflow.com/questions/2190756/how-to-count-true-values-in-a-logical-vector
sum(salaries$got_raise, na.rm=TRUE)
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
mean(salaries$change)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change[salaries$change < 0])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# I expected them to be less considering
# how big the range of random numbers was
# Write a .csv file of your salary data to your working directory
getwd()
setwd("~/Desktop")
employee_57_salary <- salaries[57, "salaries_2018"]
employee_57_salary
most_raised_employee <- salaries[salaries$change == highest_raise, "employees"]
highest_raise <- max(salaries$change)
employees_with_raise <- length(salaries$got_raise[salaries$got_raise == TRUE])
highest_raise <- max(salaries$change)
most_raised_employee <- salaries[salaries$change == highest_raise, "employees"]
most_raised_employee
highest_raise
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- (runif(100, -5000, 10000) + salaries_2017)
biggest_paycut <- min(salaries$change)
# What was the "name" of the employee who received the highest raise?
raised_employee <- salaries[salaries$change == highest_raise, "employees"]
# What was the name of the employee who recieved largest decrease in salary?
paycut_employee <- salaries[salaries$change == biggest_paycut, "employees"]
# What was the largest decrease in salaries between the two years?
biggest_paycut <- min(salaries$change)
mean(salaries$change)
# What was the average salary change?
average_salary_change <- mean(salaries$change)
mean(salaries$change[salaries$got_raise == FALSE])
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change[salaries$change < 0])
rm(list=ls())
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- (runif(100, -5000, 10000) + salaries_2017)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- (salaries_2018 - salaries_2017)
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- (salaries$change > 0)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
employee_57_salary <- salaries[57, "salaries_2018"]
# How many employees got a raise?
employees_with_raise <- length(salaries$got_raise[salaries$got_raise == TRUE])
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
# What was the "name" of the employee who received the highest raise?
raised_employee <- salaries[salaries$change == highest_raise, "employees"]
# What was the largest decrease in salaries between the two years?
biggest_paycut <- min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
paycut_employee <- salaries[salaries$change == biggest_paycut, "employees"]
# What was the average salary change?
average_salary_change <- mean(salaries$change)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change[salaries$change < 0])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# I expected them to be less considering
# how big the range of random numbers was
# Write a .csv file of your salary data to your working directory
getwd()
setwd("~/Desktop")
write.csv(salaries, 'salaries.csv')
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bagel", "blueberry banana oatmeal", "orange", "water")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("chicken burrito", "water", "Fuji Apple")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("molly moons")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_of_foods <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal){
meal <- c(meal, "pizza")
meal
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# Exercise 1: creating and accessing lists
rm(list=ls())
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bagel", "blueberry banana oatmeal", "orange", "water")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("chicken burrito", "water", "Fuji Apple")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("molly moons")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_of_foods <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal){
meal <- c(meal, "pizza")
meal
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
better_meals
View(iris_df)
iris_df <- data.frame(iris)
View(iris_df)
iris_df[["Sepal.Length"]]
iris_df$species[["verginica"]]
iris_df$species[[iris_df$Species == "verginica"]]
iris_df$species[[TRUE == "verginica"]]
iris_df$species[["verginica" == TRUE]]
iris_df$species
iris_df$species
iris_df[[iris_df$Species]]
iris_df <- data.frame(iris)
iris_df[["Sepal.Length"]]
iris_df[[iris_df$Species]]
iris_df[["Species"]]
iris_df[["Species" == "virginica"]]
iris_df$Species["Species" == virginica]
iris_df$Species["virginica"]
iris_df$Species[["virginica"]]
# Select only rows of Virginica flowers
iris[iris$Species == 'virginica', ]
# Select only rows of Virginica flowers
iris[iris$Species == "virginica", ]
iris$Sepal.Length[iris$Species == "virginica", ]
iris_df$Sepal.Length[iris$Species == "virginica", ]
# Select only rows of Virginica flowers
species_virginica <- iris[iris$Species == "virginica", ]
iris_df$Sepal.Length[species_virginica, ]
iris[iris$Sepal.Length,]
iris[iris$Sepal.Length[iris$Species == "virginica"],]
# Select only rows of Virginica flowers
species_virginica <- iris[iris$Species == "virginica", ]
iris[iris$Sepal.Length[iris$Species == "virginica"],]
iris[iris$Sepal.Length[iris$Species == "virginica", ],]
iris[iris$Sepal.Length[iris$Species == "virginica"],]
iris[iris$Sepal.Length,]
iris_df[["Sepal.Length"]]
iris$Sepal.Length
iris$Sepal.Length
iris_df[["Sepal.Length"]]
iris_df[["Sepal.Length"]]
# Select only rows of Virginica flowers
species_virginica <- iris[iris$Species == "virginica", ]
# Select only rows of Virginica flowers
iris[iris$Species == "virginica", ]
# Select only rows of Virginica flowers
species_virginica <- iris[iris$Species == "virginica", ]
species_virginica
species_virginica["Sepal.Length",]
# Select only the sepal legnth of the Virginica flowers
species_virginica["Sepal.Length"]
iris[iris$Petal.Length > 4,]
iris[iris$Petal.Length > 4,]
iris$Petal.Length > 4
# Add a column to the dataframe indicating whether Petal.Length > 4.0
iris$petal_length_greater <- iris$Petal.Length > 4
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data(USPersonalExpenditure)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# Exercise 3: working with built-in data sets
rm(list=ls())
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_exp <- data.frame(USPersonalExpenditure)
View(us_exp)
# What are the column names of your dataframe?
colnames(us_exp)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
rownames(us_exp)
# Add a column "category" to your data frame that contains the rownames
us_exp$category <- rownames(us_exp)
us_exp
# How much money was spent on personal care in 1940?
us_exp["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
us_exp["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
max(us_exp$X1960)
lowest_category <- function(year){
spending_category <- min(year)
spending_category
}
us_exp[max(us_exp$X1960), "category"]
us_exp[86.8, "category"]
# What was the highest expenditure category in 1960?
us_exp$X1960 == max(us_exp$X1960)
us_exp[us_exp$X1960 == max(us_exp$X1960), "category"]
lowest_category <- function(year){
spending_category <- us_exp[us_exp$year == max(us_exp$year), "category"]
spending_category
}
lowest_category(X1960)
lowest_category(X1960)
lowest_category("X1960")
lowest_category <- function(year){
spending_category <- us_exp[us_exp$year == min(us_exp$year), "category"]
spending_category
}
lowest_category("X1960")
lowest_category <- function(year){
us_exp[us_exp[[year]] == min(us_exp[[year]]), "category"]
}
lowest_category("X1960")
lowest_category <- function(year){
us_exp[us_exp[[year]] == max(us_exp[[year]]), "category"]
}
lowest_category("X1960")
lowest_category <- function(year){
us_exp[us_exp[[year]] == min(us_exp[[year]]), "category"]
}
lowest_category <- function(year){
year_string <- paste0('X', year)
us_exp[us_exp[[year_string]] == min(us_exp[[year_string]]), "category"]
}
lowest_category("X1960")
lowest_category(1960)
setwd("~/Desktop/exercises/ch9-data-frames/exercise-4")
setwd("~/Desktop/exercises/ch9-data-frames/exercise-4/data")
read.csv(gates_money.cvs)
read.csv("gates_money.cvs")
grants <- read.csv("data/gates_money.cvs", stringsAsFactors = FALSE)
setwd("~/Desktop/exercises/ch9-data-frames/exercise-4")
grants <- read.csv("data/gates_money.cvs", stringsAsFactors = FALSE)
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
average_grant_value <- mean(grants$total_amount)
average_grant_value
# What was the dollar amount of the largest grant?
largest_grant <- max(grants$total_amount)
largest_grant
# What was the dollar amount of the smallest grant?
smallest_grant <- min(grants$total_amount)
smallest_grant
# Which organization received the largest grant?
largest_recipient <- organization[grants$total_amount == highest_amount]
# Which organization received the largest grant?
largest_recipient <- organization[grants$total_amount == largest_grant]
largest_recipient
# Which organization received the smallest grant?
smallest_recipient <- organization[grants$total_amount == smallest_grant]
smallest_recipient
# How many grants were awarded in 2010?
grant_volume <- length(grants$total_amount[grants$start_year == 2010])
grant_volume
grant_volume <- length(grants[grants$start_year == 2010])
grant_volume <- length(grants[grants$start_year == 2010])
grant_volume <- length(grants$total_amount[grants$start_year == 2010])
grant_volume
View(us_exp)
lowest_spending_category <- lapply(colnames(us_exp), lowest_category)
lowest_category <- function(year){
year_string <- paste0('X', year)
us_exp[us_exp[[year_string]] == min(us_exp[[year_string]]), "category"]
}
lowest_category(1960)
lowest_spending_category <- lapply(seq(1940, 1960, 5), lowest_category)
lowest_spending_category
